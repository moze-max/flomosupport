import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:mockito/annotations.dart';
import 'package:uuid/uuid.dart';

// Assuming your Template class is in guidemodel.dart
import 'package:flomosupport/models/guidemodel.dart'; // Adjust this import path

// We need to mock the Uuid class to control ID generation for testing
@GenerateNiceMocks([MockSpec<Uuid>()])
import 'guide_model_test.mocks.dart'; // This file will be generated by build_runner

void main() {
  // Declare the mock Uuid outside the group, so it can be re-mocked in setUp
  late MockUuid mockUuid;

  setUp(() {
    // Initialize a new mock Uuid for each test
    mockUuid = MockUuid();
    // Default mock behavior for uuid.v4()
    when(mockUuid.v4()).thenReturn('mock-uuid-1'); // Default ID for convenience
  });

  group('Template Class', () {
    // --- Test Template constructor ---
    test(
        'Template constructor initializes all properties correctly (including classitems)',
        () {
      final template = Template(
        id: 'test-id-123',
        name: 'My Custom Template',
        items: ['1', '2', 'hello'],
        classitems: ['classA', 'classB'], // Test with classitems
        imagePath: 'assets/images/template1.png',
      );

      expect(template.id, 'test-id-123');
      expect(template.name, 'My Custom Template');
      expect(template.items, equals(['1', '2', 'hello']));
      expect(template.classitems,
          equals(['classA', 'classB'])); // Verify classitems
      expect(template.imagePath, 'assets/images/template1.png');
    });

    test(
        'Template constructor handles default items and null classitems correctly',
        () {
      final template = Template(
        id: 'test-id-456',
        name: 'Template with Default Items',
        imagePath: 'assets/images/default.png',
        // classitems is null by default if not provided
      );

      expect(template.id, 'test-id-456');
      expect(template.name, 'Template with Default Items');
      expect(template.items, isEmpty); // Default is const []
      expect(template.classitems, isNull); // Default is null
      expect(template.imagePath, 'assets/images/default.png');
    });

    // --- Test Template.create() factory constructor ---
    test(
        'Template.create factory constructor generates a unique ID (with injection) and handles all fields',
        () {
      // Configure our mock Uuid instance to return a specific ID
      when(mockUuid.v4()).thenReturn('generated-mock-uuid');

      // Pass the mocked Uuid instance to Template.create
      final template = Template.create(
        name: 'Auto Generated Template with Mocked Uuid',
        items: ['item1'],
        classitems: ['created_class_1'], // Test with classitems in create
        imagePath: 'assets/image.png',
        uuidGenerator: mockUuid, // <-- 注入 mockUuid
      );

      // Verify uuid.v4() was called once on our mock
      verify(mockUuid.v4()).called(1);
      expect(template.id, 'generated-mock-uuid'); // Expect the mocked ID
      expect(template.name, 'Auto Generated Template with Mocked Uuid');
      expect(template.items, equals(['item1']));
      expect(template.classitems,
          equals(['created_class_1'])); // Verify classitems from create
      expect(template.imagePath, 'assets/image.png');
    });

    test('Template.create handles null classitems correctly', () {
      when(mockUuid.v4()).thenReturn('uuid-with-null-classitems');
      final template = Template.create(
        name: 'No Classitems Template',
        items: ['some_item'],
        classitems: null, // Explicitly set classitems to null
      );
      expect(template.classitems, isNull);
    });

    test('Template.create handles empty classitems list correctly', () {
      when(mockUuid.v4()).thenReturn('uuid-with-empty-classitems');
      final template = Template.create(
        name: 'Empty Classitems Template',
        items: ['some_item'],
        classitems: [], // Explicitly set classitems to empty list
      );
      expect(template.classitems, isEmpty);
    });

    test('Template.create handles null imagePath correctly', () {
      when(mockUuid.v4()).thenReturn('uuid-with-no-image');
      final template = Template.create(name: 'No Image Template');
      expect(template.imagePath, isNull);
    });

    // --- Test Cases for toJson() ---

    test(
        'toJson converts Template to JSON map with all fields (including classitems)',
        () {
      final template = Template(
        id: 'json-id-1',
        name: 'JSON Template',
        classitems: ['class_item_1', 'class_item_2'], // Test with classitems
        items: [
          'item_string_1',
          'item_string_2',
          'item_string_3',
        ],
        imagePath: 'path/to/image.jpg',
      );

      final jsonMap = template.toJson();

      expect(jsonMap, isA<Map<String, dynamic>>());
      expect(jsonMap['id'], 'json-id-1');
      expect(jsonMap['name'], 'JSON Template');
      expect(jsonMap['items'],
          equals(['item_string_1', 'item_string_2', 'item_string_3']));
      expect(
          jsonMap['classitems'],
          equals(
              ['class_item_1', 'class_item_2'])); // Verify classitems in JSON
      expect(jsonMap['imagePath'], 'path/to/image.jpg');
    });

    test('toJson handles null classitems correctly', () {
      final template = Template(
        id: 'json-id-with-null-classitems',
        name: 'Template with Null Classitems',
        classitems: null, // classitems is null
        items: ['some_item'],
      );

      final jsonMap = template.toJson();
      expect(jsonMap['classitems'], isNull); // Expect null in JSON
    });

    test('toJson handles empty classitems list correctly', () {
      final template = Template(
        id: 'json-id-with-empty-classitems',
        name: 'Template with Empty Classitems',
        classitems: [], // classitems is an empty list
        items: ['some_item'],
      );

      final jsonMap = template.toJson();
      expect(jsonMap['classitems'], isEmpty); // Expect empty list in JSON
    });

    test('toJson handles null imagePath correctly', () {
      final template = Template(
        id: 'json-id-2',
        name: 'Template Without Image',
        // classitems will be null by default
      );

      final jsonMap = template.toJson();

      expect(jsonMap['id'], 'json-id-2');
      expect(jsonMap['name'], 'Template Without Image');
      expect(jsonMap['items'], isEmpty); // Default empty list
      expect(jsonMap['classitems'], isNull); // Default null
      expect(jsonMap['imagePath'], isNull);
    });

    test('toJson handles empty items list correctly', () {
      final template = Template(
        id: 'json-id-3',
        name: 'Template With Empty Items',
        items: [],
      );

      final jsonMap = template.toJson();

      expect(jsonMap['id'], 'json-id-3');
      expect(jsonMap['name'], 'Template With Empty Items');
      expect(jsonMap['items'], isEmpty);
      expect(jsonMap['classitems'], isNull); // Default null
      expect(jsonMap['imagePath'], isNull);
    });

    // --- Test Cases for fromJson() ---

    test('fromJson correctly parses a full JSON map (including classitems)',
        () {
      final jsonMap = {
        'id': 'from-json-id-1',
        'name': 'Parsed Template',
        'classitems': [
          'parsed_class_item_1',
          'parsed_class_item_2'
        ], // Test with classitems
        'items': ['parsed_item_X', 'parsed_item_Y'],
        'imagePath': 'images/parsed.png',
      };

      final template = Template.fromJson(jsonMap);

      expect(template.id, 'from-json-id-1');
      expect(template.name, 'Parsed Template');
      expect(
          template.classitems,
          equals([
            'parsed_class_item_1',
            'parsed_class_item_2'
          ])); // Verify parsed classitems
      expect(template.items, equals(['parsed_item_X', 'parsed_item_Y']));
      expect(template.imagePath, 'images/parsed.png');
    });

    test('fromJson handles null classitems in JSON correctly', () {
      final jsonMap = {
        'id': 'from-json-id-with-null-classitems',
        'name': 'Template from Null Classitems',
        'classitems': null, // JSON has null classitems
        'items': ['item'],
      };
      final template = Template.fromJson(jsonMap);
      expect(template.classitems, isNull);
    });

    test('fromJson handles empty classitems list in JSON correctly', () {
      final jsonMap = {
        'id': 'from-json-id-with-empty-classitems',
        'name': 'Template from Empty Classitems',
        'classitems': [], // JSON has empty classitems
        'items': ['item'],
      };
      final template = Template.fromJson(jsonMap);
      expect(template.classitems, isEmpty);
    });

    test('fromJson handles missing classitems key in JSON (defaults to null)',
        () {
      final jsonMap = {
        'id': 'from-json-id-missing-classitems',
        'name': 'Template Missing Classitems',
        'items': ['item'],
      };
      final template = Template.fromJson(jsonMap);
      expect(template.classitems, isNull); // Should be null if key is missing
    });

    test('fromJson handles missing imagePath (null) correctly', () {
      final jsonMap = {
        'id': 'from-json-id-2',
        'name': 'Template Without Image',
        'items': [],
      };

      final template = Template.fromJson(jsonMap);

      expect(template.id, 'from-json-id-2');
      expect(template.name, 'Template Without Image');
      expect(template.items, isEmpty);
      expect(template.imagePath, isNull);
    });

    test('fromJson handles empty items list correctly', () {
      final jsonMap = {
        'id': 'from-json-id-3',
        'name': 'Template With Empty Items',
        'items': [],
        'imagePath': 'some/path.jpg',
      };

      final template = Template.fromJson(jsonMap);

      expect(template.id, 'from-json-id-3');
      expect(template.name, 'Template With Empty Items');
      expect(template.items, isEmpty);
      expect(template.imagePath, 'some/path.jpg');
    });

    test('fromJson handles missing items key (defaults to empty)', () {
      final jsonMap = {
        'id': 'from-json-id-4',
        'name': 'Template Missing Items Key',
        // 'items' key is missing
        'imagePath': 'some/path.jpg',
      };
      final template =
          Template.fromJson(jsonMap); // Should not throw, but default to empty
      expect(template.items, isEmpty); // Verify it defaults to empty
      expect(template.id, 'from-json-id-4');
      expect(template.name, 'Template Missing Items Key');
      expect(template.imagePath, 'some/path.jpg');
    });

    // --- Test Cases for operator == and hashCode ---

    test(
        '== returns true for Templates with the same id (ignoring other fields)',
        () {
      final template1 = Template(
          id: 'same-id',
          name: 'Name1',
          items: ['a'],
          classitems: ['x'],
          imagePath: 'p1');
      final template2 = Template(
          id: 'same-id',
          name: 'Name2',
          items: ['b'],
          classitems: ['y'],
          imagePath: 'p2');

      expect(template1 == template2, isTrue);
    });

    test('== returns false for Templates with different ids', () {
      final template1 = Template(id: 'id-1', name: 'Template A');
      final template2 = Template(id: 'id-2', name: 'Template B');

      expect(template1 == template2, isFalse);
    });

    test('== returns false for Template and other object types', () {
      final template = Template(
          id: 'some-id', name: 'Test', items: []); // Ensure items is provided
      final otherObject = Object();

      expect(template == otherObject, isFalse);
    });

    test('hashCode is the same for Templates with the same id', () {
      final template1 = Template(
          id: 'same-id', name: 'Name1', items: ['a'], classitems: ['x']);
      final template2 = Template(
          id: 'same-id', name: 'Name2', items: ['b'], classitems: ['y']);

      expect(template1.hashCode, template2.hashCode);
    });

    test('hashCode is different for Templates with different ids', () {
      final template1 = Template(id: 'id-1', name: 'Template A');
      final template2 = Template(id: 'id-2', name: 'Template B');

      expect(template1.hashCode, isNot(template2.hashCode));
    });

    test('hashCode matches id.hashCode', () {
      final template =
          Template(id: 'specific-id-for-hash', name: 'Hash Test', items: []);
      expect(template.hashCode, 'specific-id-for-hash'.hashCode);
    });
  });
}
